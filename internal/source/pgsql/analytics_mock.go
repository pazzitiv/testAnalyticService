// Code generated by MockGen. DO NOT EDIT.
// Source: analytics.go

// Package pgsql is a generated GoMock package.
package pgsql

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnalyticsSource is a mock of AnalyticsSource interface.
type MockAnalyticsSource struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsSourceMockRecorder
}

// MockAnalyticsSourceMockRecorder is the mock recorder for MockAnalyticsSource.
type MockAnalyticsSourceMockRecorder struct {
	mock *MockAnalyticsSource
}

// NewMockAnalyticsSource creates a new mock instance.
func NewMockAnalyticsSource(ctrl *gomock.Controller) *MockAnalyticsSource {
	mock := &MockAnalyticsSource{ctrl: ctrl}
	mock.recorder = &MockAnalyticsSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsSource) EXPECT() *MockAnalyticsSourceMockRecorder {
	return m.recorder
}

// AddAnalytics mocks base method.
func (m *MockAnalyticsSource) AddAnalytics(ctx context.Context, data *AnalyticsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnalytics", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnalytics indicates an expected call of AddAnalytics.
func (mr *MockAnalyticsSourceMockRecorder) AddAnalytics(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnalytics", reflect.TypeOf((*MockAnalyticsSource)(nil).AddAnalytics), ctx, data)
}
