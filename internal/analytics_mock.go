// Code generated by MockGen. DO NOT EDIT.
// Source: analytics.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnalyticsRepository is a mock of AnalyticsRepository interface.
type MockAnalyticsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsRepositoryMockRecorder
}

// MockAnalyticsRepositoryMockRecorder is the mock recorder for MockAnalyticsRepository.
type MockAnalyticsRepositoryMockRecorder struct {
	mock *MockAnalyticsRepository
}

// NewMockAnalyticsRepository creates a new mock instance.
func NewMockAnalyticsRepository(ctrl *gomock.Controller) *MockAnalyticsRepository {
	mock := &MockAnalyticsRepository{ctrl: ctrl}
	mock.recorder = &MockAnalyticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsRepository) EXPECT() *MockAnalyticsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAnalyticsRepository) Add(ctx context.Context, data AnalyticData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAnalyticsRepositoryMockRecorder) Add(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAnalyticsRepository)(nil).Add), ctx, data)
}
